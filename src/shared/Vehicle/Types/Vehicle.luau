local Tune = require(script.Parent.Tune)

export type BaseVehicle = {
	Instance: Instance & {
		Wheels: Model & any,
		DriveSeat: VehicleSeat & {
			Flip: AlignOrientation,
		},
		Body: Model & {
			["#Weight"]: BasePart,
			Sounds: Model,
		},
	},
	_Remote: UnreliableRemoteEvent,
	Tune: Tune.Tune,
	Starting: boolean,
	Occupant: Player?,
	Fuel: number,
	Temperature: number,
	FanSpeed: number,
	Horning: boolean,
	-- Transmission
	Clutch: number,
	Gear: number,
	FinalDrive: number,
	FinalDriveRatio: number,
	TransmissionMode: Tune.TransmissionMode,
	CurrentRatio: number,
	RPM: number,
	Shifting: boolean,
	AutoClutch: boolean,
	-- Boost
	Boost: number,
	BoostTurbo: number,
	BoostSuper: number,
	-- Horsepower
	HpNatural: number,
	HpElectric: number,
	HpTurbo: number,
	HpSuper: number,
	HpBoosted: number,
	Horsepower: number,
	-- Torque
	TqNatural: number,
	TqElectric: number,
	TqTurbo: number,
	TqSuper: number,
	TqBoosted: number,
	Torque: number,
	-- Inputs
	Throttle: number,
	InputThrottle: number,
	Brake: number,
	InputBrake: number,
	SteerC: number,
	SteerT: number,
	MouseSteerOn: boolean,
	PBrake: boolean,
	-- Velocity
	Velocity: Vector3,
	AverageRotSpeed: number,
	Acceleration: Vector3,
	Mileage: number,
	-- Misc
	Center: CFrame,
	TCS: boolean,
	TCSActive: boolean,
	ABS: boolean,
	ABSActive: boolean,
	ESC: boolean,
	ESCActive: boolean,
	CS: boolean,
	CSActive: boolean,
	IsOn: boolean,
}

export type ClientVehicle = {
	__index: ClientVehicle,
	_conn: { RBXScriptConnection },
	_task: thread,
	_LastInputWasGamepad: boolean,
	_MaxSpin: number,
	Plugins: { [string]: any },
	WheelCount: { Front: number, Rear: number },
	Wheels: { ClientWheel },
	DriveWheels: { ClientWheel },
	ParkingGearEnabled: boolean,
	BrakeForce: { Front: number, Rear: number },
	PBrakeForce: { Front: number, Rear: number },
	Engine: any,
	Controls: VehicleControls,
	Interface: VehicleInterface,
	-- Transmission
	_GoalRPM: number,
	_ShiftUp: boolean,
	_ShiftDown: boolean,
	_ClutchPressing: boolean,
	_InputClutch: boolean,
	_DriveWheelSpeed: number,
	_LastOffTime: number,
	_CanStall: boolean,
	-- Inputs
	_SteerL: boolean,
	_SteerR: boolean,
	_InThrot: number,
	_InBrake: number,
	-- Velocity
	_OldVelocity: Vector3,

	new: (instance: Instance) -> ClientVehicle,
	Initialize: (self: ClientVehicle) -> (),
	InitializeVariables: (self: ClientVehicle) -> (),
	InitializeWheels: (self: ClientVehicle) -> (),
	InitControls: (self: ClientVehicle) -> (),
	InitializePlugins: (self: ClientVehicle) -> (),
	Update: (self: ClientVehicle, deltaTime: number) -> (),
	SlowUpdate: (self: ClientVehicle) -> (),
	UpdateWheels: (self: ClientVehicle) -> (),
	SmoothInputs: (self: ClientVehicle, deltaTime: number) -> (),
	UpdateSteering: (self: ClientVehicle, deltaTime: number) -> (),
	UpdateTransmission: (self: ClientVehicle) -> (),
	UpdateEngine: (self: ClientVehicle, deltaTime: number) -> (),
	UpdateFuel: (self: ClientVehicle, deltaTime: number) -> (),
	UpdateTemp: (self: ClientVehicle, deltaTime: number) -> (),
	OnInput: (self: ClientVehicle, input: InputObject) -> (),
	OnLastInputTypeChanged: (self: ClientVehicle, inputType: Enum.UserInputType) -> (),
	ReplicateVariables: (self: ClientVehicle) -> (),
	Destroy: (self: ClientVehicle) -> (),
} & BaseVehicle

export type ServerVehicle = {
	__index: ServerVehicle,
	Plugins: { [string]: any },

	new: (instance: Instance) -> ServerVehicle,
	Initialize: (self: ServerVehicle) -> (),
	InitializeVariables: (self: ServerVehicle) -> (),
	MakeGravity: (self: ServerVehicle) -> (),
	GetCenter: (self: ServerVehicle) -> (),
	RemoveMass: (self: ServerVehicle) -> (),
	CreateFlip: (self: ServerVehicle) -> (),
	Finalize: (self: ServerVehicle) -> (),
	InitializePlugins: (self: ServerVehicle) -> (),
	CreateChassisAssembly: (self: ServerVehicle) -> (),
	ApplyWeight: (self: ServerVehicle) -> (),
	RemoveCharacterWeight: (self: ServerVehicle) -> (),
	InitializeDriveSeat: (self: ServerVehicle) -> (),
} & BaseVehicle

return {}
